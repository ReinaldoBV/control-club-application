package cl.controlclub.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ClubAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClubAllPropertiesEquals(Club expected, Club actual) {
        assertClubAutoGeneratedPropertiesEquals(expected, actual);
        assertClubAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClubAllUpdatablePropertiesEquals(Club expected, Club actual) {
        assertClubUpdatableFieldsEquals(expected, actual);
        assertClubUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClubAutoGeneratedPropertiesEquals(Club expected, Club actual) {
        assertThat(expected)
            .as("Verify Club auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClubUpdatableFieldsEquals(Club expected, Club actual) {
        assertThat(expected)
            .as("Verify Club relevant properties")
            .satisfies(e -> assertThat(e.getRazon()).as("check razon").isEqualTo(actual.getRazon()))
            .satisfies(e -> assertThat(e.getDireccion()).as("check direccion").isEqualTo(actual.getDireccion()))
            .satisfies(e -> assertThat(e.getTelefono()).as("check telefono").isEqualTo(actual.getTelefono()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getFechaFundacion()).as("check fechaFundacion").isEqualTo(actual.getFechaFundacion()))
            .satisfies(e -> assertThat(e.getPresidente()).as("check presidente").isEqualTo(actual.getPresidente()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClubUpdatableRelationshipsEquals(Club expected, Club actual) {}
}
