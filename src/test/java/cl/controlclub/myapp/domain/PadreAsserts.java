package cl.controlclub.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PadreAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPadreAllPropertiesEquals(Padre expected, Padre actual) {
        assertPadreAutoGeneratedPropertiesEquals(expected, actual);
        assertPadreAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPadreAllUpdatablePropertiesEquals(Padre expected, Padre actual) {
        assertPadreUpdatableFieldsEquals(expected, actual);
        assertPadreUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPadreAutoGeneratedPropertiesEquals(Padre expected, Padre actual) {
        assertThat(expected)
            .as("Verify Padre auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPadreUpdatableFieldsEquals(Padre expected, Padre actual) {
        assertThat(expected)
            .as("Verify Padre relevant properties")
            .satisfies(e -> assertThat(e.getNombres()).as("check nombres").isEqualTo(actual.getNombres()))
            .satisfies(e -> assertThat(e.getApellidos()).as("check apellidos").isEqualTo(actual.getApellidos()))
            .satisfies(e -> assertThat(e.getRelacion()).as("check relacion").isEqualTo(actual.getRelacion()))
            .satisfies(e -> assertThat(e.getTelefono()).as("check telefono").isEqualTo(actual.getTelefono()))
            .satisfies(e -> assertThat(e.getAsociado()).as("check asociado").isEqualTo(actual.getAsociado()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPadreUpdatableRelationshipsEquals(Padre expected, Padre actual) {}
}
